EVENTOS EM JS

Praticamente qualquer intera√ß√£o da pessoa usu√°ria com a p√°gina pode ser considerada um evento: o rolar da tela, o passar do mouse por um elemento, o click do mouse, o digitar do teclado, entre outros.

Os EventListeners ficam esperando que algo aconte√ßa(click, mouseover, change), pra que quando isso aconte√ßa ele dispare a a√ß√£o de uma fun√ß√£o pr√©-definida;

O c√≥digo mais comum para criar um escutador de eventos em um elemento √© atrav√©s de uma fun√ß√£o nativa do JavaScript, chamada addEventListener. Fun√ß√µes nativas s√£o fun√ß√µes que j√° existem prontas dentro da linguagem e, como toda fun√ß√£o, podem receber par√¢metros.

No seu uso mais comum, addEventListener recebe dois par√¢metros:

O evento que estamos esperando escutar: Exemplos: click, change, mouseover etc.;

A fun√ß√£o (criada por voc√™) que ser√° executada quando o evento acontecer. Ela pode receber um par√¢metro de evento.

Anota a√≠ üìù: Voc√™ pode passar um par√¢metro para a sua fun√ß√£o que vai permitir acessar diversos atributos do evento, como o target, que √© o elemento-alvo em que o evento ocorre. Por exemplo, caso voc√™ queira capturar o valor digitado em um input, voc√™ pode usar da seguinte maneira: event.target.value.

Lista de events: https://www.w3schools.com/jsref/dom_obj_event.

window.onload = garante que o conte√∫do seja carregado ap√≥s que a p√°gina for carregada;
Garante assincronicidade;

PROGRAMA√á√ÉO ORIENTADA A EVENTOS

elemento.addEventListener('a√ß√£o', nome da fun√ß√£o sem ()); a fun√ß√£o pode ser escrita dentro do parenteses ou posso s√≥ chamar a fun√ß√£o constru√≠da previamente.

event.target !importante!

window.innerWidth; mostra largura da tela;
window.innerHeigth; mostra altura da tela;


